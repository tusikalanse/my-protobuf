// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace OuterTest {
namespace InnerTest {
class TestMessage;
class TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
class TestMessage_MapMemberEntry_DoNotUse;
class TestMessage_MapMemberEntry_DoNotUseDefaultTypeInternal;
extern TestMessage_MapMemberEntry_DoNotUseDefaultTypeInternal _TestMessage_MapMemberEntry_DoNotUse_default_instance_;
class TestNestedMessage;
class TestNestedMessageDefaultTypeInternal;
extern TestNestedMessageDefaultTypeInternal _TestNestedMessage_default_instance_;
class TestRequest;
class TestRequestDefaultTypeInternal;
extern TestRequestDefaultTypeInternal _TestRequest_default_instance_;
class TestResponse;
class TestResponseDefaultTypeInternal;
extern TestResponseDefaultTypeInternal _TestResponse_default_instance_;
}  // namespace InnerTest
}  // namespace OuterTest
PROTOBUF_NAMESPACE_OPEN
template<> ::OuterTest::InnerTest::TestMessage* Arena::CreateMaybeMessage<::OuterTest::InnerTest::TestMessage>(Arena*);
template<> ::OuterTest::InnerTest::TestMessage_MapMemberEntry_DoNotUse* Arena::CreateMaybeMessage<::OuterTest::InnerTest::TestMessage_MapMemberEntry_DoNotUse>(Arena*);
template<> ::OuterTest::InnerTest::TestNestedMessage* Arena::CreateMaybeMessage<::OuterTest::InnerTest::TestNestedMessage>(Arena*);
template<> ::OuterTest::InnerTest::TestRequest* Arena::CreateMaybeMessage<::OuterTest::InnerTest::TestRequest>(Arena*);
template<> ::OuterTest::InnerTest::TestResponse* Arena::CreateMaybeMessage<::OuterTest::InnerTest::TestResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OuterTest {
namespace InnerTest {

// ===================================================================

class TestMessage_MapMemberEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMessage_MapMemberEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMessage_MapMemberEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TestMessage_MapMemberEntry_DoNotUse();
  explicit TestMessage_MapMemberEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestMessage_MapMemberEntry_DoNotUse& other);
  static const TestMessage_MapMemberEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMessage_MapMemberEntry_DoNotUse*>(&_TestMessage_MapMemberEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "OuterTest.InnerTest.TestMessage.MapMemberEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class TestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterTest.InnerTest.TestMessage) */ {
 public:
  inline TestMessage() : TestMessage(nullptr) {}
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMessage* New() const final {
    return CreateMaybeMessage<TestMessage>(nullptr);
  }

  TestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterTest.InnerTest.TestMessage";
  }
  protected:
  explicit TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedIntMemberFieldNumber = 3,
    kRepeatedStringMemberFieldNumber = 4,
    kMapMemberFieldNumber = 5,
    kStringMemberFieldNumber = 1,
    kIntMemberFieldNumber = 2,
  };
  // repeated int32 repeated_int_member = 3;
  int repeated_int_member_size() const;
  private:
  int _internal_repeated_int_member_size() const;
  public:
  void clear_repeated_int_member();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeated_int_member(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_repeated_int_member() const;
  void _internal_add_repeated_int_member(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_repeated_int_member();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 repeated_int_member(int index) const;
  void set_repeated_int_member(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_repeated_int_member(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      repeated_int_member() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_repeated_int_member();

  // repeated string repeated_string_member = 4;
  int repeated_string_member_size() const;
  private:
  int _internal_repeated_string_member_size() const;
  public:
  void clear_repeated_string_member();
  const std::string& repeated_string_member(int index) const;
  std::string* mutable_repeated_string_member(int index);
  void set_repeated_string_member(int index, const std::string& value);
  void set_repeated_string_member(int index, std::string&& value);
  void set_repeated_string_member(int index, const char* value);
  void set_repeated_string_member(int index, const char* value, size_t size);
  std::string* add_repeated_string_member();
  void add_repeated_string_member(const std::string& value);
  void add_repeated_string_member(std::string&& value);
  void add_repeated_string_member(const char* value);
  void add_repeated_string_member(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string_member() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string_member();
  private:
  const std::string& _internal_repeated_string_member(int index) const;
  std::string* _internal_add_repeated_string_member();
  public:

  // map<int32, string> map_member = 5;
  int map_member_size() const;
  private:
  int _internal_map_member_size() const;
  public:
  void clear_map_member();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_map_member() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_map_member();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      map_member() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_map_member();

  // string string_member = 1;
  bool has_string_member() const;
  private:
  bool _internal_has_string_member() const;
  public:
  void clear_string_member();
  const std::string& string_member() const;
  void set_string_member(const std::string& value);
  void set_string_member(std::string&& value);
  void set_string_member(const char* value);
  void set_string_member(const char* value, size_t size);
  std::string* mutable_string_member();
  std::string* release_string_member();
  void set_allocated_string_member(std::string* string_member);
  private:
  const std::string& _internal_string_member() const;
  void _internal_set_string_member(const std::string& value);
  std::string* _internal_mutable_string_member();
  public:

  // int32 int_member = 2;
  bool has_int_member() const;
  private:
  bool _internal_has_int_member() const;
  public:
  void clear_int_member();
  ::PROTOBUF_NAMESPACE_ID::int32 int_member() const;
  void set_int_member(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_member() const;
  void _internal_set_int_member(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OuterTest.InnerTest.TestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > repeated_int_member_;
  mutable std::atomic<int> _repeated_int_member_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_string_member_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TestMessage_MapMemberEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > map_member_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_member_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_member_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestNestedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterTest.InnerTest.TestNestedMessage) */ {
 public:
  inline TestNestedMessage() : TestNestedMessage(nullptr) {}
  virtual ~TestNestedMessage();

  TestNestedMessage(const TestNestedMessage& from);
  TestNestedMessage(TestNestedMessage&& from) noexcept
    : TestNestedMessage() {
    *this = ::std::move(from);
  }

  inline TestNestedMessage& operator=(const TestNestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedMessage& operator=(TestNestedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestNestedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestNestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestNestedMessage*>(
               &_TestNestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestNestedMessage& a, TestNestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestNestedMessage* New() const final {
    return CreateMaybeMessage<TestNestedMessage>(nullptr);
  }

  TestNestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestNestedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestNestedMessage& from);
  void MergeFrom(const TestNestedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterTest.InnerTest.TestNestedMessage";
  }
  protected:
  explicit TestNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestMessageMemberFieldNumber = 1,
    kIntMemberFieldNumber = 2,
  };
  // .OuterTest.InnerTest.TestMessage test_message_member = 1;
  bool has_test_message_member() const;
  private:
  bool _internal_has_test_message_member() const;
  public:
  void clear_test_message_member();
  const ::OuterTest::InnerTest::TestMessage& test_message_member() const;
  ::OuterTest::InnerTest::TestMessage* release_test_message_member();
  ::OuterTest::InnerTest::TestMessage* mutable_test_message_member();
  void set_allocated_test_message_member(::OuterTest::InnerTest::TestMessage* test_message_member);
  private:
  const ::OuterTest::InnerTest::TestMessage& _internal_test_message_member() const;
  ::OuterTest::InnerTest::TestMessage* _internal_mutable_test_message_member();
  public:
  void unsafe_arena_set_allocated_test_message_member(
      ::OuterTest::InnerTest::TestMessage* test_message_member);
  ::OuterTest::InnerTest::TestMessage* unsafe_arena_release_test_message_member();

  // int32 int_member = 2;
  bool has_int_member() const;
  private:
  bool _internal_has_int_member() const;
  public:
  void clear_int_member();
  ::PROTOBUF_NAMESPACE_ID::int32 int_member() const;
  void set_int_member(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_member() const;
  void _internal_set_int_member(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OuterTest.InnerTest.TestNestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::OuterTest::InnerTest::TestMessage* test_message_member_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_member_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterTest.InnerTest.TestRequest) */ {
 public:
  inline TestRequest() : TestRequest(nullptr) {}
  virtual ~TestRequest();

  TestRequest(const TestRequest& from);
  TestRequest(TestRequest&& from) noexcept
    : TestRequest() {
    *this = ::std::move(from);
  }

  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequest& operator=(TestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestRequest* internal_default_instance() {
    return reinterpret_cast<const TestRequest*>(
               &_TestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestRequest& a, TestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestRequest* New() const final {
    return CreateMaybeMessage<TestRequest>(nullptr);
  }

  TestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestRequest& from);
  void MergeFrom(const TestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterTest.InnerTest.TestRequest";
  }
  protected:
  explicit TestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestStringFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // string request_string = 2;
  bool has_request_string() const;
  private:
  bool _internal_has_request_string() const;
  public:
  void clear_request_string();
  const std::string& request_string() const;
  void set_request_string(const std::string& value);
  void set_request_string(std::string&& value);
  void set_request_string(const char* value);
  void set_request_string(const char* value, size_t size);
  std::string* mutable_request_string();
  std::string* release_request_string();
  void set_allocated_request_string(std::string* request_string);
  private:
  const std::string& _internal_request_string() const;
  void _internal_set_request_string(const std::string& value);
  std::string* _internal_mutable_request_string();
  public:

  // int32 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OuterTest.InnerTest.TestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OuterTest.InnerTest.TestResponse) */ {
 public:
  inline TestResponse() : TestResponse(nullptr) {}
  virtual ~TestResponse();

  TestResponse(const TestResponse& from);
  TestResponse(TestResponse&& from) noexcept
    : TestResponse() {
    *this = ::std::move(from);
  }

  inline TestResponse& operator=(const TestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestResponse& operator=(TestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResponse* internal_default_instance() {
    return reinterpret_cast<const TestResponse*>(
               &_TestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TestResponse& a, TestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestResponse* New() const final {
    return CreateMaybeMessage<TestResponse>(nullptr);
  }

  TestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestResponse& from);
  void MergeFrom(const TestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OuterTest.InnerTest.TestResponse";
  }
  protected:
  explicit TestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseStringFieldNumber = 2,
    kResponseIdFieldNumber = 1,
  };
  // string response_string = 2;
  bool has_response_string() const;
  private:
  bool _internal_has_response_string() const;
  public:
  void clear_response_string();
  const std::string& response_string() const;
  void set_response_string(const std::string& value);
  void set_response_string(std::string&& value);
  void set_response_string(const char* value);
  void set_response_string(const char* value, size_t size);
  std::string* mutable_response_string();
  std::string* release_response_string();
  void set_allocated_response_string(std::string* response_string);
  private:
  const std::string& _internal_response_string() const;
  void _internal_set_response_string(const std::string& value);
  std::string* _internal_mutable_response_string();
  public:

  // int32 response_id = 1;
  bool has_response_id() const;
  private:
  bool _internal_has_response_id() const;
  public:
  void clear_response_id();
  ::PROTOBUF_NAMESPACE_ID::int32 response_id() const;
  void set_response_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_response_id() const;
  void _internal_set_response_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OuterTest.InnerTest.TestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 response_id_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestMessage

// string string_member = 1;
inline bool TestMessage::_internal_has_string_member() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestMessage::has_string_member() const {
  return _internal_has_string_member();
}
inline void TestMessage::clear_string_member() {
  string_member_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestMessage::string_member() const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestMessage.string_member)
  return _internal_string_member();
}
inline void TestMessage::set_string_member(const std::string& value) {
  _internal_set_string_member(value);
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestMessage.string_member)
}
inline std::string* TestMessage::mutable_string_member() {
  // @@protoc_insertion_point(field_mutable:OuterTest.InnerTest.TestMessage.string_member)
  return _internal_mutable_string_member();
}
inline const std::string& TestMessage::_internal_string_member() const {
  return string_member_.Get();
}
inline void TestMessage::_internal_set_string_member(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_member_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestMessage::set_string_member(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  string_member_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OuterTest.InnerTest.TestMessage.string_member)
}
inline void TestMessage::set_string_member(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  string_member_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OuterTest.InnerTest.TestMessage.string_member)
}
inline void TestMessage::set_string_member(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  string_member_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OuterTest.InnerTest.TestMessage.string_member)
}
inline std::string* TestMessage::_internal_mutable_string_member() {
  _has_bits_[0] |= 0x00000001u;
  return string_member_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestMessage::release_string_member() {
  // @@protoc_insertion_point(field_release:OuterTest.InnerTest.TestMessage.string_member)
  if (!_internal_has_string_member()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_member_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestMessage::set_allocated_string_member(std::string* string_member) {
  if (string_member != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_member_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_member,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OuterTest.InnerTest.TestMessage.string_member)
}

// int32 int_member = 2;
inline bool TestMessage::_internal_has_int_member() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestMessage::has_int_member() const {
  return _internal_has_int_member();
}
inline void TestMessage::clear_int_member() {
  int_member_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage::_internal_int_member() const {
  return int_member_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage::int_member() const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestMessage.int_member)
  return _internal_int_member();
}
inline void TestMessage::_internal_set_int_member(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  int_member_ = value;
}
inline void TestMessage::set_int_member(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_member(value);
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestMessage.int_member)
}

// repeated int32 repeated_int_member = 3;
inline int TestMessage::_internal_repeated_int_member_size() const {
  return repeated_int_member_.size();
}
inline int TestMessage::repeated_int_member_size() const {
  return _internal_repeated_int_member_size();
}
inline void TestMessage::clear_repeated_int_member() {
  repeated_int_member_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage::_internal_repeated_int_member(int index) const {
  return repeated_int_member_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestMessage::repeated_int_member(int index) const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestMessage.repeated_int_member)
  return _internal_repeated_int_member(index);
}
inline void TestMessage::set_repeated_int_member(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int_member_.Set(index, value);
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestMessage.repeated_int_member)
}
inline void TestMessage::_internal_add_repeated_int_member(::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int_member_.Add(value);
}
inline void TestMessage::add_repeated_int_member(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_repeated_int_member(value);
  // @@protoc_insertion_point(field_add:OuterTest.InnerTest.TestMessage.repeated_int_member)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestMessage::_internal_repeated_int_member() const {
  return repeated_int_member_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestMessage::repeated_int_member() const {
  // @@protoc_insertion_point(field_list:OuterTest.InnerTest.TestMessage.repeated_int_member)
  return _internal_repeated_int_member();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestMessage::_internal_mutable_repeated_int_member() {
  return &repeated_int_member_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestMessage::mutable_repeated_int_member() {
  // @@protoc_insertion_point(field_mutable_list:OuterTest.InnerTest.TestMessage.repeated_int_member)
  return _internal_mutable_repeated_int_member();
}

// repeated string repeated_string_member = 4;
inline int TestMessage::_internal_repeated_string_member_size() const {
  return repeated_string_member_.size();
}
inline int TestMessage::repeated_string_member_size() const {
  return _internal_repeated_string_member_size();
}
inline void TestMessage::clear_repeated_string_member() {
  repeated_string_member_.Clear();
}
inline std::string* TestMessage::add_repeated_string_member() {
  // @@protoc_insertion_point(field_add_mutable:OuterTest.InnerTest.TestMessage.repeated_string_member)
  return _internal_add_repeated_string_member();
}
inline const std::string& TestMessage::_internal_repeated_string_member(int index) const {
  return repeated_string_member_.Get(index);
}
inline const std::string& TestMessage::repeated_string_member(int index) const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestMessage.repeated_string_member)
  return _internal_repeated_string_member(index);
}
inline std::string* TestMessage::mutable_repeated_string_member(int index) {
  // @@protoc_insertion_point(field_mutable:OuterTest.InnerTest.TestMessage.repeated_string_member)
  return repeated_string_member_.Mutable(index);
}
inline void TestMessage::set_repeated_string_member(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestMessage.repeated_string_member)
  repeated_string_member_.Mutable(index)->assign(value);
}
inline void TestMessage::set_repeated_string_member(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestMessage.repeated_string_member)
  repeated_string_member_.Mutable(index)->assign(std::move(value));
}
inline void TestMessage::set_repeated_string_member(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_member_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OuterTest.InnerTest.TestMessage.repeated_string_member)
}
inline void TestMessage::set_repeated_string_member(int index, const char* value, size_t size) {
  repeated_string_member_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OuterTest.InnerTest.TestMessage.repeated_string_member)
}
inline std::string* TestMessage::_internal_add_repeated_string_member() {
  return repeated_string_member_.Add();
}
inline void TestMessage::add_repeated_string_member(const std::string& value) {
  repeated_string_member_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OuterTest.InnerTest.TestMessage.repeated_string_member)
}
inline void TestMessage::add_repeated_string_member(std::string&& value) {
  repeated_string_member_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OuterTest.InnerTest.TestMessage.repeated_string_member)
}
inline void TestMessage::add_repeated_string_member(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_member_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OuterTest.InnerTest.TestMessage.repeated_string_member)
}
inline void TestMessage::add_repeated_string_member(const char* value, size_t size) {
  repeated_string_member_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OuterTest.InnerTest.TestMessage.repeated_string_member)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestMessage::repeated_string_member() const {
  // @@protoc_insertion_point(field_list:OuterTest.InnerTest.TestMessage.repeated_string_member)
  return repeated_string_member_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestMessage::mutable_repeated_string_member() {
  // @@protoc_insertion_point(field_mutable_list:OuterTest.InnerTest.TestMessage.repeated_string_member)
  return &repeated_string_member_;
}

// map<int32, string> map_member = 5;
inline int TestMessage::_internal_map_member_size() const {
  return map_member_.size();
}
inline int TestMessage::map_member_size() const {
  return _internal_map_member_size();
}
inline void TestMessage::clear_map_member() {
  map_member_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
TestMessage::_internal_map_member() const {
  return map_member_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
TestMessage::map_member() const {
  // @@protoc_insertion_point(field_map:OuterTest.InnerTest.TestMessage.map_member)
  return _internal_map_member();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
TestMessage::_internal_mutable_map_member() {
  return map_member_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
TestMessage::mutable_map_member() {
  // @@protoc_insertion_point(field_mutable_map:OuterTest.InnerTest.TestMessage.map_member)
  return _internal_mutable_map_member();
}

// -------------------------------------------------------------------

// TestNestedMessage

// .OuterTest.InnerTest.TestMessage test_message_member = 1;
inline bool TestNestedMessage::_internal_has_test_message_member() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || test_message_member_ != nullptr);
  return value;
}
inline bool TestNestedMessage::has_test_message_member() const {
  return _internal_has_test_message_member();
}
inline void TestNestedMessage::clear_test_message_member() {
  if (GetArena() == nullptr && test_message_member_ != nullptr) {
    delete test_message_member_;
  }
  test_message_member_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::OuterTest::InnerTest::TestMessage& TestNestedMessage::_internal_test_message_member() const {
  const ::OuterTest::InnerTest::TestMessage* p = test_message_member_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OuterTest::InnerTest::TestMessage*>(
      &::OuterTest::InnerTest::_TestMessage_default_instance_);
}
inline const ::OuterTest::InnerTest::TestMessage& TestNestedMessage::test_message_member() const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestNestedMessage.test_message_member)
  return _internal_test_message_member();
}
inline void TestNestedMessage::unsafe_arena_set_allocated_test_message_member(
    ::OuterTest::InnerTest::TestMessage* test_message_member) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_message_member_);
  }
  test_message_member_ = test_message_member;
  if (test_message_member) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OuterTest.InnerTest.TestNestedMessage.test_message_member)
}
inline ::OuterTest::InnerTest::TestMessage* TestNestedMessage::release_test_message_member() {
  _has_bits_[0] &= ~0x00000001u;
  ::OuterTest::InnerTest::TestMessage* temp = test_message_member_;
  test_message_member_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OuterTest::InnerTest::TestMessage* TestNestedMessage::unsafe_arena_release_test_message_member() {
  // @@protoc_insertion_point(field_release:OuterTest.InnerTest.TestNestedMessage.test_message_member)
  _has_bits_[0] &= ~0x00000001u;
  ::OuterTest::InnerTest::TestMessage* temp = test_message_member_;
  test_message_member_ = nullptr;
  return temp;
}
inline ::OuterTest::InnerTest::TestMessage* TestNestedMessage::_internal_mutable_test_message_member() {
  _has_bits_[0] |= 0x00000001u;
  if (test_message_member_ == nullptr) {
    auto* p = CreateMaybeMessage<::OuterTest::InnerTest::TestMessage>(GetArena());
    test_message_member_ = p;
  }
  return test_message_member_;
}
inline ::OuterTest::InnerTest::TestMessage* TestNestedMessage::mutable_test_message_member() {
  // @@protoc_insertion_point(field_mutable:OuterTest.InnerTest.TestNestedMessage.test_message_member)
  return _internal_mutable_test_message_member();
}
inline void TestNestedMessage::set_allocated_test_message_member(::OuterTest::InnerTest::TestMessage* test_message_member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_message_member_;
  }
  if (test_message_member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test_message_member);
    if (message_arena != submessage_arena) {
      test_message_member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_message_member, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  test_message_member_ = test_message_member;
  // @@protoc_insertion_point(field_set_allocated:OuterTest.InnerTest.TestNestedMessage.test_message_member)
}

// int32 int_member = 2;
inline bool TestNestedMessage::_internal_has_int_member() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestNestedMessage::has_int_member() const {
  return _internal_has_int_member();
}
inline void TestNestedMessage::clear_int_member() {
  int_member_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestNestedMessage::_internal_int_member() const {
  return int_member_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestNestedMessage::int_member() const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestNestedMessage.int_member)
  return _internal_int_member();
}
inline void TestNestedMessage::_internal_set_int_member(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  int_member_ = value;
}
inline void TestNestedMessage::set_int_member(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_member(value);
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestNestedMessage.int_member)
}

// -------------------------------------------------------------------

// TestRequest

// int32 request_id = 1;
inline bool TestRequest::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestRequest::has_request_id() const {
  return _internal_has_request_id();
}
inline void TestRequest::clear_request_id() {
  request_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestRequest::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestRequest::request_id() const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestRequest.request_id)
  return _internal_request_id();
}
inline void TestRequest::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_ = value;
}
inline void TestRequest::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestRequest.request_id)
}

// string request_string = 2;
inline bool TestRequest::_internal_has_request_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestRequest::has_request_string() const {
  return _internal_has_request_string();
}
inline void TestRequest::clear_request_string() {
  request_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestRequest::request_string() const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestRequest.request_string)
  return _internal_request_string();
}
inline void TestRequest::set_request_string(const std::string& value) {
  _internal_set_request_string(value);
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestRequest.request_string)
}
inline std::string* TestRequest::mutable_request_string() {
  // @@protoc_insertion_point(field_mutable:OuterTest.InnerTest.TestRequest.request_string)
  return _internal_mutable_request_string();
}
inline const std::string& TestRequest::_internal_request_string() const {
  return request_string_.Get();
}
inline void TestRequest::_internal_set_request_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestRequest::set_request_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OuterTest.InnerTest.TestRequest.request_string)
}
inline void TestRequest::set_request_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OuterTest.InnerTest.TestRequest.request_string)
}
inline void TestRequest::set_request_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OuterTest.InnerTest.TestRequest.request_string)
}
inline std::string* TestRequest::_internal_mutable_request_string() {
  _has_bits_[0] |= 0x00000001u;
  return request_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestRequest::release_request_string() {
  // @@protoc_insertion_point(field_release:OuterTest.InnerTest.TestRequest.request_string)
  if (!_internal_has_request_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestRequest::set_allocated_request_string(std::string* request_string) {
  if (request_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OuterTest.InnerTest.TestRequest.request_string)
}

// -------------------------------------------------------------------

// TestResponse

// int32 response_id = 1;
inline bool TestResponse::_internal_has_response_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestResponse::has_response_id() const {
  return _internal_has_response_id();
}
inline void TestResponse::clear_response_id() {
  response_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestResponse::_internal_response_id() const {
  return response_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestResponse::response_id() const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestResponse.response_id)
  return _internal_response_id();
}
inline void TestResponse::_internal_set_response_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  response_id_ = value;
}
inline void TestResponse::set_response_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_response_id(value);
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestResponse.response_id)
}

// string response_string = 2;
inline bool TestResponse::_internal_has_response_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestResponse::has_response_string() const {
  return _internal_has_response_string();
}
inline void TestResponse::clear_response_string() {
  response_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestResponse::response_string() const {
  // @@protoc_insertion_point(field_get:OuterTest.InnerTest.TestResponse.response_string)
  return _internal_response_string();
}
inline void TestResponse::set_response_string(const std::string& value) {
  _internal_set_response_string(value);
  // @@protoc_insertion_point(field_set:OuterTest.InnerTest.TestResponse.response_string)
}
inline std::string* TestResponse::mutable_response_string() {
  // @@protoc_insertion_point(field_mutable:OuterTest.InnerTest.TestResponse.response_string)
  return _internal_mutable_response_string();
}
inline const std::string& TestResponse::_internal_response_string() const {
  return response_string_.Get();
}
inline void TestResponse::_internal_set_response_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  response_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestResponse::set_response_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  response_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OuterTest.InnerTest.TestResponse.response_string)
}
inline void TestResponse::set_response_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  response_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OuterTest.InnerTest.TestResponse.response_string)
}
inline void TestResponse::set_response_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  response_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OuterTest.InnerTest.TestResponse.response_string)
}
inline std::string* TestResponse::_internal_mutable_response_string() {
  _has_bits_[0] |= 0x00000001u;
  return response_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestResponse::release_response_string() {
  // @@protoc_insertion_point(field_release:OuterTest.InnerTest.TestResponse.response_string)
  if (!_internal_has_response_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return response_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestResponse::set_allocated_response_string(std::string* response_string) {
  if (response_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  response_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OuterTest.InnerTest.TestResponse.response_string)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InnerTest
}  // namespace OuterTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
